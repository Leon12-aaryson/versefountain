// VerseFountain Database ER Diagram
// A comprehensive poetry and literature platform database structure
// Docs: https://dbml.dbdiagram.io/docs

// =============================================
// CORE USER MANAGEMENT
// =============================================

Table users {
  id integer [primary key, increment]
  first_name varchar(255) [null]
  last_name varchar(255) [null]
  username varchar(255) [not null]
  email varchar(255) [unique, not null]
  bio text [null]
  role varchar(255) [default: 'user']
  email_verified_at timestamp [null]
  password varchar(255) [not null]
  remember_token varchar(100) [null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Core user accounts for the platform'
}

// =============================================
// CONTENT MANAGEMENT
// =============================================

Table poems {
  id integer [primary key, increment]
  title varchar(255) [not null]
  content text [not null, note: 'The actual poem content']
  author_id integer [not null]
  isVideo boolean [default: false]
  videoUrl varchar(255) [null]
  approved boolean [default: true]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Poems created by users on the platform'
}

Table books {
  id integer [primary key, increment]
  title varchar(255) [not null]
  description text [null]
  coverImage varchar(255) [null]
  author_id integer [not null]
  genre varchar(255) [null]
  uploadedById integer [null]
  approved boolean [default: false]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Books published by authors'
}

Table academic_resources {
  id integer [primary key, increment]
  title varchar(255) [not null]
  description text [null]
  type varchar(255) [not null, note: 'study_guide, video, career_guide']
  subject varchar(255) [null]
  gradeLevel varchar(255) [null]
  language varchar(255) [default: 'English']
  resourceUrl varchar(255) [null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Educational resources for students'
}

// =============================================
// SOCIAL FEATURES
// =============================================

Table poet_followers {
  id integer [primary key, increment]
  follower_id integer [not null]
  poet_id integer [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  indexes {
    (follower_id, poet_id) [unique]
  }
  
  Note: 'User following relationships for poets'
}

Table user_poems {
  id integer [primary key, increment]
  user_id integer [not null]
  poem_id integer [not null]
  type varchar(255) [not null, note: 'like or rating']
  rating integer [null, note: '1-5 for rating type']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  indexes {
    (user_id, poem_id, type) [unique]
  }
  
  Note: 'User interactions with poems (likes/ratings)'
}

Table poem_comments {
  id integer [primary key, increment]
  poem_id integer [not null]
  user_id integer [not null]
  content text [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Comments on poems'
}

Table comment_reactions {
  id integer [primary key, increment]
  comment_id integer [not null]
  user_id integer [not null]
  reaction_type varchar(255) [not null, note: 'like, love, laugh, etc.']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  indexes {
    (comment_id, user_id, reaction_type) [unique]
  }
  
  Note: 'Reactions to poem comments'
}

// =============================================
// EVENTS & TICKETING
// =============================================

Table events {
  id integer [primary key, increment]
  title varchar(255) [not null]
  description text [null]
  date timestamp [not null]
  location varchar(255) [not null]
  ticketPrice integer [default: 0]
  organizer varchar(255) [null]
  isVirtual boolean [default: false]
  streamUrl varchar(255) [null]
  isFree boolean [default: false]
  created_by_id integer [null]
  category varchar(255) [default: 'general']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Poetry events and book launches'
}

Table tickets {
  id integer [primary key, increment]
  event_id integer [not null]
  user_id integer [not null]
  purchaseDate timestamp [default: `now()`]
  ticketCode varchar(255) [unique, not null]
  status varchar(255) [default: 'active']
  payment_id integer [null]
  isRefunded boolean [default: false]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Event tickets purchased by users'
}

Table payments {
  id integer [primary key, increment]
  user_id integer [not null]
  event_id integer [not null]
  amount integer [not null]
  currency varchar(255) [default: 'USD']
  status varchar(255) [not null, note: 'pending, completed, refunded, failed']
  paddlepayment_id varchar(255) [unique, null]
  paddleTransactionId varchar(255) [null]
  refundReason text [null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Payment transactions for events'
}

// =============================================
// COMMUNICATION
// =============================================

Table chat_rooms {
  id integer [primary key, increment]
  name varchar(255) [not null]
  description text [null]
  created_by_id integer [null]
  isPrivate boolean [default: false]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Chat rooms for community discussions'
}

Table user_chat_rooms {
  id integer [primary key, increment]
  user_id integer [not null]
  room_id integer [not null]
  joined_at timestamp [default: `now()`]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  indexes {
    (user_id, room_id) [unique]
  }
  
  Note: 'Many-to-many relationship between users and chat rooms'
}

Table chat_messages {
  id integer [primary key, increment]
  room_id integer [not null]
  user_id integer [not null]
  message text [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Messages sent in chat rooms'
}

// =============================================
// SUBSCRIPTIONS
// =============================================

Table subscriptions {
  id integer [primary key, increment]
  user_id integer [not null]
  plan_name varchar(255) [not null]
  status varchar(255) [not null, note: 'active, cancelled, expired']
  start_date timestamp [not null]
  end_date timestamp [null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'User subscription plans'
}

// =============================================
// RELATIONSHIPS
// =============================================

// User relationships
Ref: users.id < poet_followers.follower_id
Ref: users.id < poet_followers.poet_id

// Content relationships
Ref: users.id < poems.author_id
Ref: users.id < books.author_id
Ref: users.id < books.uploadedById
Ref: users.id < events.created_by_id
Ref: users.id < chat_rooms.created_by_id

// User interactions
Ref: users.id < user_poems.user_id
Ref: poems.id < user_poems.poem_id
Ref: users.id < poem_comments.user_id
Ref: poems.id < poem_comments.poem_id
Ref: users.id < comment_reactions.user_id
Ref: poem_comments.id < comment_reactions.comment_id

// Event and ticketing
Ref: events.id < tickets.event_id
Ref: users.id < tickets.user_id
Ref: payments.id < tickets.payment_id
Ref: users.id < payments.user_id
Ref: events.id < payments.event_id

// Chat system
Ref: users.id < user_chat_rooms.user_id
Ref: chat_rooms.id < user_chat_rooms.room_id
Ref: users.id < chat_messages.user_id
Ref: chat_rooms.id < chat_messages.room_id

// Subscriptions
Ref: users.id < subscriptions.user_id
